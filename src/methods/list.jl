
methods = (
    RK,
    # explicit Runge-Kutta methods
    ForwardEuler,
    ExplicitEuler,
    ExplicitMidpoint,
    Heun2,
    Heun3,
    Kutta3,
    Ralston2,
    Ralston3,
    RK4,
    RK416,
    RK438,
    Runge2,
    SSPRK2,
    SSPRK3,
    # diagonally implicit Runge-Kutta methods
    CrankNicolson,
    Crouzeix,
    KraaijevangerSpijker,
    QinZhang,
    # fully implicit Runge-Kutta methods
    BackwardEuler,
    ImplicitEuler,
    ImplicitMidpoint,
    SRK3,
    # Runge-Kutta methods with variable number of stages
    Gauss,
    LobattoIIIA,
    LobattoIIIB,
    LobattoIIIC,
    LobattoIIIC̄,
    LobattoIIID,
    LobattoIIIE,
    LobattoIIIF,
    LobattoIIIF̄,
    LobattoIIIG,
    RadauIA,
    RadauIB,
    RadauIIA,
    RadauIIB,
    # partitioned Runge-Kutta methods with variable number of stages
    LobattoIIIAIIIB,
    LobattoIIIBIIIA,
    LobattoIIIAIIIĀ,
    LobattoIIIBIIIB̄,
    LobattoIIICIIIC̄,
    LobattoIIIC̄IIIC,
    LobattoIIIDIIID̄,
    LobattoIIIEIIIĒ,
    LobattoIIIFIIIF̄,
    LobattoIIIF̄IIIF,
    LobattoIIIGIIIḠ,
    # variational partitioned Runge-Kutta methods
    VPRK,
    VPSRK3,
    VPRKGauss,
    VPRKRadauIIA,
    VPRKRadauIIB,
    VPRKLobattoIIIA,
    VPRKLobattoIIIB,
    VPRKLobattoIIIC,
    VPRKLobattoIIIC̄,
    VPRKLobattoIIID,
    VPRKLobattoIIIE,
    VPRKLobattoIIIF,
    VPRKLobattoIIIG,
    VPRKLobattoIIIAIIIB,
    VPRKLobattoIIIBIIIA,
    VPRKLobattoIIIAIIIĀ,
    VPRKLobattoIIIBIIIB̄,
    VPRKLobattoIIICIIIC̄,
    VPRKLobattoIIIC̄IIIC,
    VPRKLobattoIIIDIIID̄,
    VPRKLobattoIIIEIIIĒ,
    VPRKLobattoIIIFIIIF̄,
    VPRKLobattoIIIF̄IIIF,
    VPRKLobattoIIIGIIIḠ,
    # projected VPRK methods
    ProjectedVPRK,
    VPRKpInternal,
    VPRKpLegendre,
    VPRKpMidpoint,
    VPRKpSecondary,
    VPRKpStandard,
    VPRKpSymmetric,
    VPRKpSymplectic,
    VPRKpVariational,
    VPRKpVariationalP,
    VPRKpVariationalQ,
    # degenerate VPRK methods
    DegenerateVPRK,
)

for m in nameof.(methods)
    @eval export $m
end
